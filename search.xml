<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Rust复合数据类型</title>
    <url>/2020/02/25/Rust%E5%A4%8D%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="Rust复合数据类型"><a href="#Rust复合数据类型" class="headerlink" title="Rust复合数据类型"></a>Rust复合数据类型</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组(Array)是Rust内建的原始集合类型，数组的特点为：大小固定，元素类型相同，默认不可变。数组的类型签名为<strong>[T;N]</strong>，T是泛型，N是数组长度，N是一个编译时常量，必须在编译时确定其值。在Rust中，当数组的T和N都一样时，数组的类型才是相同的。同类型的数组之间才能相互赋值，需要注意的是，数组和指针不能隐式转换，数组在传递的时候是值传递，将复制一份数组的副本，并不是传递指针。编译器会检查是否下标越界，如果发生越界，程序会panic，立即退出。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> a: [<span class="built_in">i32</span>;<span class="number">3</span>] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> b: [<span class="built_in">i32</span>;<span class="number">3</span>] = a;</span><br><span class="line">    a[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, a.len());<span class="comment">//len方法用于获取数组长度</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, a);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, b);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>,b&gt;a);<span class="comment">//true</span></span><br><span class="line">    <span class="keyword">let</span> a2 = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>]];<span class="comment">//多维数组</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, a2);</span><br><span class="line">    <span class="keyword">let</span> a2 = [<span class="number">3_i32</span>,<span class="number">4</span>];<span class="comment">//创建元素相同的数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>切片是对一个数组的引用片段，是已经存在的变量的一部分，切片有两种类型：&amp;[T]和&amp;mut [T]，数组的指针类型是&amp;[T;N]或者&amp;mut [T;N]，占8位，和一个指针相同，而数组的切片的类型为&amp;[T]或者&amp;mut [T]，占了16位，切片本质上还是指针类型，数组的指针类型可以自动转化为切片类型，为什么切片类型占了16位，其实它是一个胖指针，有两个指针，一个指向数组的地址，一个指向数组或切片的长度。注意：<strong>数组不能直接迭代，切片可以</strong>。由于Rust在索引操作时会执行检查，频繁的使用索引访问会降低效率，所以推荐使用迭代器的方式。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">mut_array</span></span>(a: &amp;<span class="keyword">mut</span>[<span class="built_in">i32</span>])&#123;</span><br><span class="line">        a[<span class="number">2</span>] = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&amp;mut:&#123;:?&#125;"</span>, std::mem::size_of::&lt;&amp;[<span class="built_in">i32</span>;<span class="number">3</span>]&gt;());</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&amp;:&#123;:?&#125;"</span>, std::mem::size_of::&lt;&amp;[<span class="built_in">i32</span>]&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> a: [<span class="built_in">i32</span>;<span class="number">3</span>] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> s: &amp;<span class="keyword">mut</span> [<span class="built_in">i32</span>;<span class="number">3</span>] = &amp;<span class="keyword">mut</span> a;</span><br><span class="line">        mut_array(s);<span class="comment">//数组指针自动转化成对应的切片类型</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, a);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h2><p>范围(Range)类型，有左开右闭区间和全闭区间两种，例如<code>1..5</code>是<code>std::ops::Range</code>的实例，<code>1..=5</code>是<code>std::ops::RangeInclusive</code>的实例，<code>..</code>和<code>。。=</code>是语法糖，范围类型可以直接用for in迭代，范围区间最常用的地方就是用于数组切片：<code>&amp;array[1..]</code>。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="comment">//let a = 1..5;和下面的写法等价</span></span><br><span class="line">    <span class="keyword">let</span> a = std::ops::Range&#123;start:<span class="number">1</span>,end:<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="comment">//let b = 1..=5;和下面的写法等价</span></span><br><span class="line">    <span class="keyword">let</span> b = std::ops::RangeInclusive::new(<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, a);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, b);</span><br><span class="line">    <span class="keyword">let</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, &amp;array[<span class="number">2</span>..]);<span class="comment">//范围用于数组切片</span></span><br><span class="line">    <span class="built_in">println!</span>();</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>();</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> b &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="comment">//1..5</span></span><br><span class="line"><span class="comment">//1..=5</span></span><br><span class="line"><span class="comment">//[3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="comment">//4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="comment">//4</span></span><br><span class="line"><span class="comment">//5</span></span><br></pre></td></tr></table></figure>



<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>Rust中有两种类型的字符串：&amp;str和String。&amp;str是Rust的核心内置的字符串类型，而String是标准库中的一个结构。</p>
<h3 id="amp-str"><a href="#amp-str" class="headerlink" title="&amp;str"></a>&amp;str</h3><p>&amp;str，即字符串切片，在编译时就确定其长度，不可更改，因为在Rust里的char类型是4个字节，所以字符串并不能认为是char数组，而更接近u8数组。字符串的字面量也是&amp;str，但是准确说是静态类型，就和静态变量一样是全局的。&amp;str有两个函数<code>as_ptr()</code>和<code>len()</code>可以的到其指针和长度，由此可见，&amp;str也是一个胖指针；由于UTF-8是变长编码，所以无法通过索引获取其中一个字符，要想通过索引获得单个字符需要<code>s.chars().nth(index)</code>。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> s1 = <span class="string">"hello"</span>;</span><br><span class="line">    <span class="keyword">let</span> s2: &amp;<span class="built_in">str</span> = s1;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;,&#123;&#125;"</span>, s1,s2);</span><br><span class="line">    <span class="keyword">let</span> p: *<span class="keyword">const</span> <span class="built_in">u8</span> = s2.as_ptr();<span class="comment">//指针为const u8类型</span></span><br><span class="line">    <span class="keyword">let</span> l = s2.len();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"p=&#123;:?&#125;,l=&#123;&#125;"</span>,p,l);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, s1.chars().nth(<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">unsafe</span>&#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>,*p);<span class="comment">//操作原生指针需要unsafe代码块</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="comment">//hello,hello</span></span><br><span class="line"><span class="comment">//p=0x477060,l=5</span></span><br><span class="line"><span class="comment">//Some('e')</span></span><br><span class="line"><span class="comment">//104</span></span><br></pre></td></tr></table></figure>



<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>String和&amp;str最大的区别在于String拥有管理内存空间的权力，但是&amp;str只是对一块字符串区间的借用，对指向的内存空间没有所有权。String的内存空间是在堆上动态分配的，它有权扩容，&amp;String可以被自动转换为&amp;str类型。<code>let s = String::from(&quot;Hello&quot;);</code></p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>Rust是支持函数式编程的语言，函数是一等公民，可以作为参数和返回值。</p>
<p>定义一个函数用<strong>fn</strong>关键字，定义函数的形式为：<code>fn function_name(a:T, b:T...) -&gt;T{...}</code></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">add</span></span>(a:<span class="built_in">i32</span>, b:<span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    a+b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">sub</span></span>(a:<span class="built_in">i32</span>, b:<span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    a-b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">op</span></span>(f:<span class="function"><span class="keyword">fn</span></span>(<span class="built_in">i32</span>, <span class="built_in">i32</span>)-&gt;<span class="built_in">i32</span>, a:<span class="built_in">i32</span>, b:<span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    f(a,b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">num</span></span>() -&gt; <span class="function"><span class="keyword">fn</span></span>(<span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">npp</span></span>(x:<span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">        x+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    npp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> r1 = op(add,a,b);</span><br><span class="line">    <span class="keyword">let</span> r2 = op(sub,a,b);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"r1=&#123;&#125;,r2=&#123;&#125;"</span>, r1,r2);</span><br><span class="line">    <span class="keyword">let</span> f = num();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, f(<span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="comment">//r1=14,r2=4</span></span><br><span class="line"><span class="comment">//3</span></span><br></pre></td></tr></table></figure>

<p><strong>需要注意的是，Rust对语句和表达式有着严格的区别，函数体中最后一句就是函数的返回值，如果函数有返回值，最后一句必须是表达式，即不能加；，应为加上；即被视为语句(除非是return语句)，语句是没有结果的，这会导致编译不通过，所以当函数有返回值时，最后一句末尾不要加；</strong>。</p>
<h2 id="异构数据类型"><a href="#异构数据类型" class="headerlink" title="异构数据类型"></a>异构数据类型</h2><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>元组(Tuple)是一种异构有限序列，异构就是指元组内的元素类型可以不同，元组的长度也是固定的，和数组一样，访问元组可以向和数组那样通过索引或者通过let结构元素(匹配模式)，利用元组可以是函数返回多个值。当元组没有元素时，表示为()，这样的元组有一个特殊的名字叫做unit(单元类型)，其占用的内存空间为0；当元组中只有一个元素时，应当在元素后加上,以区分括号表达式(和Python一样)。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">max_and_min</span></span>(a:<span class="built_in">i32</span>, b:<span class="built_in">i32</span>, c:<span class="built_in">i32</span>) -&gt; (<span class="built_in">i32</span>,<span class="built_in">i32</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> min = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> a&gt;=b &#123;</span><br><span class="line">        <span class="keyword">if</span> a&gt;=c &#123;</span><br><span class="line">            max = a;</span><br><span class="line">            <span class="keyword">if</span> b &gt;= c &#123;</span><br><span class="line">                min = c;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                min = b;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            max = c;</span><br><span class="line">            min = b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> b &gt;= c &#123;</span><br><span class="line">            max = b;</span><br><span class="line">            <span class="keyword">if</span> a &gt;= c &#123;</span><br><span class="line">                min = c;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                min = a;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            max = c;</span><br><span class="line">            min = a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    (max,min)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> result = max_and_min(<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, result);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;,&#123;&#125;"</span>, result.<span class="number">0</span>,result.<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> (max,min) = result;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"max=&#123;&#125;,min=&#123;&#125;"</span>, max,min);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, ());</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>,(<span class="number">0</span>));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>,(<span class="number">0</span>,));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="comment">//(3, 1)</span></span><br><span class="line"><span class="comment">//3,1</span></span><br><span class="line"><span class="comment">//max=3,min=1</span></span><br><span class="line"><span class="comment">//()</span></span><br><span class="line"><span class="comment">//0</span></span><br><span class="line"><span class="comment">//(0,)</span></span><br></pre></td></tr></table></figure>



<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><h4 id="具名结构体"><a href="#具名结构体" class="headerlink" title="具名结构体"></a>具名结构体</h4><p>结构体与元组类似，但是其中的每一个元素都有自己的名字。因为不能类型推导，所以每个元素的类型必须显式指定；结构体命名需遵循大驼峰命名法，不然编译器会给出警告；结构体成员用结构体实例.元素名来访问。也可以用匹配模式来访问元素。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug,PartialEq)]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span></span> &#123;</span><br><span class="line">    name : &amp;<span class="symbol">'static</span> <span class="built_in">str</span>,<span class="comment">//静态类型</span></span><br><span class="line">    age : <span class="built_in">i32</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">impl</span> Person &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">new</span></span>(name:&amp;<span class="symbol">'static</span> <span class="built_in">str</span>, age: <span class="built_in">i32</span>) -&gt; <span class="keyword">Self</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Person&#123;name:name,age:age&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">get_age</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">set_name</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>,name:&amp;<span class="symbol">'static</span> <span class="built_in">str</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="comment">//let p = Person&#123;name:"xsd", age:14&#125;;</span></span><br><span class="line">    <span class="keyword">let</span> p = Person::new(<span class="string">"xsd"</span>,<span class="number">14</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"name=&#123;&#125;,age=&#123;&#125;"</span>, p.name,p.age);</span><br><span class="line">    <span class="keyword">let</span> Person&#123;name:x, age:y&#125; = p;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"x=&#123;&#125;,y=&#123;&#125;"</span>,x,y);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, p.get_age());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>impl代码块将定义在代码块之中的函数变成了结构体的方法，和GO实现面向对象的方式有些类似；注意：当方法参数有self时，用实例.方法名来调用方法，当参数里没有self时用结构体::方法名来调用方法，上面的代码中的new方法模拟了其他面向对象语言中的构造器。</p>
<p>当有局部变量与结构体的元素同名同类型时，在用局部变量给结构体的实例初始化时，可以不用加上元素名和冒号，当使用匹配模式访问元素时，若用与结构体元素同名的变量接收时，也可以省略。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    name: &amp;<span class="symbol">'static</span> <span class="built_in">str</span>,</span><br><span class="line">    age: <span class="built_in">i32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">"xsd"</span>;</span><br><span class="line">    <span class="keyword">let</span> age = <span class="number">14</span>;</span><br><span class="line">    <span class="keyword">let</span> p = Person&#123;name,age&#125;;<span class="comment">//初始化时简写</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> Person&#123;name,age&#125; = p;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"name=&#123;&#125;,age=&#123;&#125;"</span>, name,age);<span class="comment">//匹配模式时简写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="元组结构体"><a href="#元组结构体" class="headerlink" title="元组结构体"></a>元组结构体</h4><p>元组结构体元素只有类型没有名字，和元素一样用下标来访问元素，就像有名字的元组。当元组结构体中只有一个元素时，这时称之为New Type模式。相当于把原有的类型包装成了一个新的类型，这和用type起别名不同，这是相当于创造了一种新类型，比如你可以给i32包装成Integer类型，然后给它添加一些方法。注意：<strong>定义元组结构体用的()而不是{}，并且后面要加上分号。</strong></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyTuple</span></span>(<span class="built_in">i32</span>,&amp;<span class="symbol">'static</span> <span class="built_in">str</span>,<span class="built_in">f64</span>);</span><br><span class="line"><span class="keyword">impl</span> MyTuple &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">print_tuple</span></span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"0:&#123;&#125;,1:&#123;&#125;,2:&#123;&#125;"</span>, <span class="keyword">self</span>.<span class="number">0</span>,<span class="keyword">self</span>.<span class="number">1</span>,<span class="keyword">self</span>.<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> t = MyTuple(<span class="number">14</span>,<span class="string">"xsd"</span>,<span class="number">99.9</span>);</span><br><span class="line">    t.print_tuple();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="单元结构体"><a href="#单元结构体" class="headerlink" title="单元结构体"></a>单元结构体</h4><p>当结构体内部没有元素时，就是一个单元结构体，其定义方式为：<code>struct Empty{};</code>，单元结构体的实例就是其本身，在Debug模式下，创建的多个单元结构体的内存地址不同，但是在Release模式下，创建多个单元结构体它们会被编译器优化为一个”对象“，单元结构体主要用于一些特殊的场景。</p>
<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>Rust的枚举比其他很多语言中的枚举更为强大，用<strong>enum</strong>关键字定义，Rust中有三种形式的枚举。</p>
<h3 id="无参枚举体"><a href="#无参枚举体" class="headerlink" title="无参枚举体"></a>无参枚举体</h3><p>无参枚举和C语言的枚举不同，不是数字，更没有默认值，也不能指定值，主要用于匹配模式。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Level</span></span> &#123;</span><br><span class="line">    One,</span><br><span class="line">    Two,</span><br><span class="line">    Three</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> a = Level::One;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>,a);<span class="comment">//One</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类C枚举体"><a href="#类C枚举体" class="headerlink" title="类C枚举体"></a>类C枚举体</h3><p>用法和c语言相同，这里的枚举体元素就有了值，可以被转换为i32类型。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Color</span></span> &#123;</span><br><span class="line">    Red = <span class="number">0</span>,</span><br><span class="line">    Yellow = <span class="number">1</span>,</span><br><span class="line">    Blue = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> a = Color::Blue;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, a);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>,a <span class="keyword">as</span> <span class="built_in">i32</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="comment">//Blue</span></span><br><span class="line"><span class="comment">//2</span></span><br></pre></td></tr></table></figure>

<h3 id="带参枚举体"><a href="#带参枚举体" class="headerlink" title="带参枚举体"></a>带参枚举体</h3><p>带参枚举体的枚举值带有类型参数，属于一种类型构造器，带参枚举体的枚举值本质上是函数类型。使用其枚举值就像调用函数一样。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">IpAddr</span></span> &#123;</span><br><span class="line">    V4(<span class="built_in">u8</span>,<span class="built_in">u8</span>,<span class="built_in">u8</span>,<span class="built_in">u8</span>),</span><br><span class="line">    V6(<span class="built_in">String</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> x: <span class="function"><span class="keyword">fn</span></span>(<span class="built_in">u8</span>,<span class="built_in">u8</span>,<span class="built_in">u8</span>,<span class="built_in">u8</span>) -&gt; IpAddr = IpAddr::V4;</span><br><span class="line">    <span class="keyword">let</span> y = IpAddr::V6;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, x(<span class="number">127</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, y(<span class="string">"xsd"</span>.to_string()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="comment">//V4(127, 0, 0, 1)</span></span><br><span class="line"><span class="comment">//V6("xsd")</span></span><br></pre></td></tr></table></figure>

<p>枚举体在Rust中是非常重要的类型，经常用于函数的返回值，表示有值和无值的情况，保证了程序的安全(在很多其他的支持函数式编程范式的语言如Scala中也有此用法)。</p>
]]></content>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust变量与基本类型</title>
    <url>/2020/02/23/Rust%E5%8F%98%E9%87%8F%E4%B8%8E%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="Rust之变量与基本类型"><a href="#Rust之变量与基本类型" class="headerlink" title="Rust之变量与基本类型"></a>Rust之变量与基本类型</h1><h2 id="Rust基本数据类型"><a href="#Rust基本数据类型" class="headerlink" title="Rust基本数据类型"></a>Rust基本数据类型</h2><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><p>布尔类型(bool)是Rust内置的数据类型。bool类型只有两个值：true和false。bool类型可以被转化为数字，但是数字不能转化为bool类型。</p>
<h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><p>在Rust中，用单引号定义字符类型(char)，用来表示Unicode标量值，而<strong>不是ASCII码值</strong>，<strong>占4个字节</strong>。也可以指字面量为ASCII码，这样只占一个字节，节省空间。</p>
<h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><p>Rust的数字类型分为三类：取值范围固定的类型，动态取值范围的类型，浮点数类型。</p>
<h4 id="固定取值范围类型"><a href="#固定取值范围类型" class="headerlink" title="固定取值范围类型"></a>固定取值范围类型</h4><p>包括无符号整数和符号整数</p>
<ul>
<li>无符号整数</li>
</ul>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">u8</td>
<td align="center">8位无符号数，占1个字节，数值范围为0~2<sup>8</sup> -1，通常用于流中的字节序列</td>
</tr>
<tr>
<td align="center">u16</td>
<td align="center">16位无符号数，占2个字节，范围0~2<sup>16</sup> -1</td>
</tr>
<tr>
<td align="center">u32</td>
<td align="center">32位无符号数，占4个字节，范围0~2<sup>32</sup> -1</td>
</tr>
<tr>
<td align="center">u64</td>
<td align="center">64位无符号数，占8个字节，范围0~2<sup>64</sup> -1</td>
</tr>
<tr>
<td align="center">u128</td>
<td align="center">128位无符号数，占16个字节，范围2<sup>128</sup> -1</td>
</tr>
</tbody></table>
<ul>
<li>符号整数</li>
</ul>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">i8</td>
<td align="center">8位有符号数，占1个字节，数值范围-2<sup>7</sup>~2<sup>7</sup> -1</td>
</tr>
<tr>
<td align="center">i16</td>
<td align="center">16位有符号数，占2个字节，数值范围-2<sup>15</sup>~2<sup>15</sup> -1</td>
</tr>
<tr>
<td align="center">i32</td>
<td align="center">32位有符号整数，占4个字节，数值范围-2<sup>31</sup>~2<sup>31</sup> -1</td>
</tr>
<tr>
<td align="center">i64</td>
<td align="center">64位有符号整数，占8个字节，数值范围-2<sup>63</sup>~2<sup>63</sup> -1</td>
</tr>
<tr>
<td align="center">i128</td>
<td align="center">128位有符号整数，占16个字节，数值范围-2<sup>127</sup>~2<sup>127</sup> -1</td>
</tr>
</tbody></table>
<h4 id="动态取值范围的整数"><a href="#动态取值范围的整数" class="headerlink" title="动态取值范围的整数"></a>动态取值范围的整数</h4><ul>
<li><strong>usize</strong>，数值范围位0 ~ 2<sup>32</sup> -1或者0 ~ 2<sup>64</sup> -1，占用4个或者8个字节，取却于机器字长</li>
<li><strong>isize</strong>，数值范围-2<sup>31</sup> ~ 2<sup>31</sup> -1或者-2<sup>63</sup> ~ 2<sup>63</sup> -1，占用4个或者8个字节，取决于机器字长</li>
</ul>
<h4 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h4><p>浮点类型都是有符号的，分为：</p>
<ul>
<li><strong>f32</strong>，单精度32位浮点数，至少6位有效数字，数值范围为-3.4e38~3.4e38</li>
<li><strong>f64</strong>，双精度64位浮点数，至少15位有效数字，数值范围为-1.8e308~1.8e308</li>
</ul>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><p>Rust中的变量必须先声明后使用，创建变量使用<strong>let</strong>关键字，最常用的一种形式：</p>
<p><code>let a : i32 = 100;</code></p>
<p>这是Rust从函数式语言中借鉴的语法形式，称之为绑定，表明了标识符和值之间建立的一种关联关系。变量名的后面是冒号。冒号的后面是类型，因为Rust编译器具有类型推断的能力(现在比较新的静态语言好像都有这个)，所以也可以省略类型：<code>let a = 100;</code>(好像具有类型推导的语言类型都放在后面)。</p>
<p>在Rust中声明的变量默认都是不可变的(只读的)，对不可变变量再次赋值会发生编译错误：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">100</span>;</span><br><span class="line">    a = <span class="number">101</span>;<span class="comment">//错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>要想使用可变的变量，要使用<strong>mut</strong>关键字：<code>let mut a = 100;</code>，这样就可以改变变量的值了。注意在这里这个变量是mut a，let和mut不是一个整体。</p>
<p>还可以依次声明多个变量：<code>let (mut a,mut b) = (1,2);</code>，在这里<code>(1,2)</code>其实是一种复合数据类型——元组，而这样的方式其实被称为解构。</p>
<p>需要注意一点，在Rust中变量必须初始化后再使用，和C语言不同，<strong>Rust中变量没有默认值</strong>。</p>
<h3 id="变量遮蔽"><a href="#变量遮蔽" class="headerlink" title="变量遮蔽"></a>变量遮蔽</h3><p>Rust和其它大部分语言有一个很大的不同，就是在Rust中的变量遮蔽实在统一代码块下仍然可以生效。例如：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"a=&#123;&#125;"</span>,a);</span><br><span class="line">    <span class="keyword">let</span> a = <span class="string">"hello"</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"a=&#123;&#125;"</span>,a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面这段代码完全没有问题，它只是重新声明了一个变量，只不过两者名字相同而已，后面的a已经遮蔽了前面的a，从第二个a定义开始，前一个变量无法在被访问，它被<strong>遮蔽</strong>了。</p>
<h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><p>关键字<strong>type</strong>用于给同一个类型起别名</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">Age</span></span> = <span class="built_in">u32</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">add</span></span>(x: Age, y: Age) -&gt; Age &#123;</span><br><span class="line">    x+y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> a : Age = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">let</span> b : <span class="built_in">u32</span> = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"result:&#123;&#125;"</span>,add(a,b)); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>类型别名可以代替复杂的类型，简化代码，提高可读性。</p>
<h3 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h3><p>Rust中用<strong>static</strong>关键字声明静态变量：<code>static GLOBAL : i32 = 0;</code>，静态变量的声明周期是从程序开始到程序退出，也是不可变变量，其实就是全局变量。Rust非常注重安全，所以在静态变量(或者叫全局变量)的使用上有很多限制：</p>
<ol>
<li>全局变量在声明的时候必须初始化</li>
<li>全局变量初始化时的值必须是在编译时期就可以确定的，不能是运行时才能确定的表达式，语句，函数调用</li>
<li>使用mut修饰的静态变量在使用时必须用unsafe关键字，不论是读或者写。</li>
</ol>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>Rust中用<strong>const</strong>关键字声明常量，<code>const GLOBAL: i32 = 1;</code>，因为是常量，所以不允许用mut修饰常量，常量的初始化要求也与全局变量类似，不能是运行时期确定的值或表达式，常量与全局变量最大的不同在于编译器并不一定会常量分配内存空间，常量也没有let语句的模式匹配功能。</p>
<h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><p>在写字面量的时候可以在后面加上类型，并且加类型的写法有两种，还有二进制，流进制，八进制的写法。<strong>在Rust中所有的数字字面量都可以任意地添加下划线方便阅读</strong>，例如：0x_FF_FF，32_11_u32等等。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">static</span> YEAR: <span class="built_in">u32</span> = <span class="number">42</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>,YEAR);</span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">1_i32</span>;<span class="comment">//数字字面值的另一种写法</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>,num);</span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">32u64</span>;<span class="comment">//也是数字字面值的另一种写法</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>,num);</span><br><span class="line">    <span class="keyword">let</span> f = <span class="number">9.0f32</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>,f);</span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">0b1101_1011</span>;<span class="comment">//二进制</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>,num);</span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">0o16</span>;<span class="comment">//八进制</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>,num);</span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">0x1A</span>;<span class="comment">//十六进制</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>,num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在定义字符型变量时，如果只用到了ASCII码，那么只用一个字节就够了，这样可以在字符字面量前面加上字母b就可以，例如定义字符‘a’，就可以<code>let x = b&#39;a&#39;;</code>，这样这个字符的类型就是u8。</li>
<li>在标准库std::f64和std::f32里都提供了IEEE所需的特殊常量值</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>,std::<span class="built_in">f32</span>::INFINITY);<span class="comment">//无穷大</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>,std::<span class="built_in">f32</span>::NEG_INFINITY);<span class="comment">//负无穷大</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>,std::<span class="built_in">f32</span>::NAN);<span class="comment">//非数值</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>,std::<span class="built_in">f32</span>::MIN);<span class="comment">//最小有限值</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>,std::<span class="built_in">f32</span>::MAX);<span class="comment">//最大有限值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果:</span></span><br><span class="line"><span class="comment">//inf</span></span><br><span class="line"><span class="comment">//-inf</span></span><br><span class="line"><span class="comment">//NaN</span></span><br><span class="line"><span class="comment">//-340282350000000000000000000000000000000.0</span></span><br><span class="line"><span class="comment">//340282350000000000000000000000000000000.0</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>整数的默认类型是i32</p>
</li>
<li><p>在Rust中可以为任意类型添加方法，例如标准库中的整数求幂方法：<code>println!(&quot;{}&quot;,2_i32.pow(3));</code></p>
</li>
</ul>
<h3 id="数值计算问题"><a href="#数值计算问题" class="headerlink" title="数值计算问题"></a>数值计算问题</h3><p>在整数的计算上，默认情况下，在debug模式下，编译器会检查溢出，一旦发生溢出会引发panic，当初在release模式下，不检查整数溢出，采取和C一样的自动舍弃高位的方式。</p>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>Rust对类型转换控制的非常严格，下面这段代码编译将会报错</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a: <span class="built_in">i32</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b: <span class="built_in">i64</span> = a;</span><br></pre></td></tr></table></figure>

<p>i32不能直接转化成i64，这在很多的语言里很正常(隐式转化)，但是在Rust中需要用<strong>as</strong>关键字显式转化，有时甚至需要多次转化</p>
<p><code>let b: i64 = a as i64;</code></p>
<p>整数和浮点数可以用as互相转换，布尔类型可以转化为整数，而整数不能够转化为布尔类型</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> a: <span class="built_in">i32</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> b: <span class="built_in">i64</span> = a <span class="keyword">as</span> <span class="built_in">i64</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"b=&#123;&#125;"</span>,b);</span><br><span class="line">    <span class="keyword">let</span> f: <span class="built_in">f64</span> = a <span class="keyword">as</span> <span class="built_in">f64</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"f=&#123;&#125;"</span>,f);</span><br><span class="line">    <span class="keyword">let</span> num: <span class="built_in">i64</span> = f <span class="keyword">as</span> <span class="built_in">i64</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"num=&#123;&#125;"</span>,num);</span><br><span class="line">    <span class="keyword">let</span> c: <span class="built_in">char</span> = <span class="string">'A'</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"c=&#123;&#125;"</span>,c);</span><br><span class="line">    <span class="keyword">let</span> c: <span class="built_in">i32</span> = c <span class="keyword">as</span> <span class="built_in">i32</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"c=&#123;&#125;"</span>,c);</span><br><span class="line">    <span class="keyword">let</span> b: <span class="built_in">bool</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"b=&#123;&#125;"</span>,b);</span><br><span class="line">    <span class="keyword">let</span> b = b <span class="keyword">as</span> <span class="built_in">i32</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"b=&#123;&#125;"</span>,b);</span><br><span class="line">    <span class="keyword">let</span> b: <span class="built_in">bool</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"b=&#123;&#125;"</span>,b);</span><br><span class="line">    <span class="keyword">let</span> b = b <span class="keyword">as</span> <span class="built_in">u8</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"b=&#123;&#125;"</span>,b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="comment">//b=1</span></span><br><span class="line"><span class="comment">//f=1</span></span><br><span class="line"><span class="comment">//num=1</span></span><br><span class="line"><span class="comment">//c=A</span></span><br><span class="line"><span class="comment">//c=65</span></span><br><span class="line"><span class="comment">//b=true</span></span><br><span class="line"><span class="comment">//b=1</span></span><br><span class="line"><span class="comment">//b=false</span></span><br><span class="line"><span class="comment">//b=0</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust初探</title>
    <url>/2020/02/22/Rust%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h1 id="Rust初探"><a href="#Rust初探" class="headerlink" title="Rust初探"></a>Rust初探</h1><h2 id="初识Rust"><a href="#初识Rust" class="headerlink" title="初识Rust"></a>初识Rust</h2><p>Rust是由Mozilla推出的编程语言，最初听说Rust编程语言是因为它连续四年获得“最受欢迎的编程语言”的称号。但是使用Rust的人并不多，并且其以学习曲线陡峭著称，那么这样看似矛盾的现象勾起了我对Rust的好奇心，所以想了解了解这门语言。听说这门语言以取代C++为目的，被称为下一个40年使用的语言，那么它到底是一门什么样的语言？</p>
<p>在Rust的官网首页上，就描述了Rust的三个特点：高性能，可靠，高效率。而其他资料关于Rust的描述为：无GC，内存安全，线程安全，混合多种编程范式，强类型的静态的系统级语言。从其描述上看，的确有要替代C++的语言”该有的样子“。</p>
<p>系统级编程是相对于应用级编程而言，一般来说，系统级编程意味着更接近底层，为上层的应用软件提供支持，系统级编程语言一般具有以下特点：</p>
<ol>
<li>可以在资源非常受限的环境下执行；</li>
<li>运行时开销很小，非常高效；</li>
<li>很小的运行库，甚至于没有；</li>
<li>可以允许直接的内存操作。</li>
</ol>
<p>需要注意的是，这里的系统并不一定指的就是操作系统。近些年越来越多的出现的被称为“系统级”的编程语言(如：Go，Dlang，Nim等)，但是主流的系统级编程语言还是C和C++，而Rust显然定位与他们相同，都是编译型语言，无需runtime，没有GC等等，但是Rust于C/C++最大的不同是Rust虽然没有GC但是确是内存安全的，这可以说是Rust的最大特点。另外，在很多谈论Rust的时候都会谈到其一个重要的设计哲学：<strong>零成本抽象</strong>，这表明Rust除了安全，还追求高效率开发和性能。我们知道，相比于C/C++等偏底层的语言，一些较为”上层“的编程语言(如：Python，Ruby等)的开发效率更高，因为这些语言具有一定的抽象表达能力，但是这些语言的抽象表达能力大多都是靠牺牲性能换来的，而Rust的设计哲学之一就是零成本抽象，在拥有不逊于C++的性能的同时拥有提高开发效率和实用性的抽象能力。</p>
<p>关于安装配置环境和其他大多数语言没什么不同，安装一些列Rust的工具链包括Rust的编译器rustc，包管理器cargo，其他一系列的工具，还有管理更新这些工具的rustup，rustc和go一样，不仅能指出错误，还能给出改正的建议，这对新手非常友好，还有着很好的交叉编译能力。需要注意的是，如果是在Windows环境下安装配置Rust开发环境，还需要下载VS，安装Visual C++工具链。并且由于网络的关系，rust的工具链可能会下载失败，需要配置镜像或者多试几次。</p>
<h2 id="你好，世界"><a href="#你好，世界" class="headerlink" title="你好，世界"></a>你好，世界</h2><p>我们没有理由不遵循传统，从最简单的hello world开始，一开始就有两种方式，通过<code>cargo new hello_world</code>命令让cargo创建一个新项目，里面就包含有一个main.rs文件，Rust的源代码文件以<code>.rs</code>结尾，并且必需是UTF-8编码，创建了一个新的项目之后进入项目根目录下，可以用命令<code>cargo build hello_world</code>编译整个项目，也可以使用命令<code>cargo run hello_world</code>直接运行整个项目，在编译或者运行之前还可以用<code>cargo check</code>来检查项目是否可以编译，这比<code>cargo build</code>快的多。cargo作为包管理工具还可以帮我们下载依赖，当然一个简单的hello word并不需要依赖什么，所以这样做有些费事，那么就使用最原始的方式用编译器编译，然后运行。</p>
<p>新建一个名为<code>hello.rs</code>的文件，编写代码：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Hello World!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>保存退出，在命令行中进入当前路径，使用命令<code>rustc hello.rs</code>编译的到一个同名的可执行文件，运行就可以在控制台上看到打印的<code>Hello Wolrd!</code>，到这里第一个程序就完成了。</p>
<h2 id="标准输出"><a href="#标准输出" class="headerlink" title="标准输出"></a>标准输出</h2><p>在上面的程序中<code>println!</code>是一个宏，并不是一个函数，和C语言的<code>printf</code>函数作用类似。Rust用宏来做输出的好处是在编译时就可以对参数的个数，格式做检查，以便提早发现错误，而函数只能在运行时发现出错。这面一段代码是输出宏的一些用法：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Hello, world!"</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"1,2,&#123;&#125;"</span>, <span class="number">3</span>); <span class="comment">//普通用法</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:o&#125;"</span>, <span class="number">16</span>); <span class="comment">//八进制</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:X&#125;"</span>, <span class="number">16</span>); <span class="comment">//十六进制，x大小写都行</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:b&#125;"</span>, <span class="number">8</span>); <span class="comment">//二进制</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:p&#125;"</span>, &amp;<span class="number">0</span>); <span class="comment">//指针</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:e&#125;"</span>, <span class="number">10000.3</span>); <span class="comment">//科学计数,e大小写都行</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, <span class="string">"test"</span>); <span class="comment">//打印debug</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:#?&#125;"</span>, (<span class="string">"test1"</span>, <span class="string">"test2"</span>)); <span class="comment">//换行打印debug</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"a=&#123;a&#125;,b=&#123;b&#125;"</span>, b = <span class="number">1</span>, a = <span class="number">2</span>); <span class="comment">//命名参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码的运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello, world!</span><br><span class="line">1,2,3</span><br><span class="line">20</span><br><span class="line">10</span><br><span class="line">1000</span><br><span class="line">0x4760c8</span><br><span class="line">1.00003e4</span><br><span class="line">&quot;test&quot;</span><br><span class="line">(</span><br><span class="line">    &quot;test1&quot;,</span><br><span class="line">    &quot;test2&quot;,</span><br><span class="line">)</span><br><span class="line">a&#x3D;2,b&#x3D;1</span><br></pre></td></tr></table></figure>



<p>Rust官网地址：<a href="https://www.rust-lang.org/" target="_blank" rel="noopener">https://www.rust-lang.org/</a></p>
<p>Rust标准库文档地址： <a href="https://doc.rust-lang.org/std/" target="_blank" rel="noopener">https://doc.rust-lang.org/std/</a></p>
]]></content>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
</search>
